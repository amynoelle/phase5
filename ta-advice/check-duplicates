#! /usr/bin/perl -w

use strict;

usage () if !@ARGV;
(print "$ARGV[0]: chdir: $!\n"), usage () if !chdir ($ARGV[0]);

sub usage {
    print <<EOF;
check-duplicates

Checks submission directories for duplicate and otherwise suspicious
submissions.

usage: check-duplicates HWDIR
where HWDIR is a directory whose subdirectories contain grade.txt files
in the format produced by the submit script.

Only subdirectories whose names are entirely alphanumeric are checked,
so you can use other names for temporary directories or known
duplicate submissions.
EOF
    exit 1;
}

my (%stu2grp);
my ($group_cnt) = 0;
for my $group (grep (/^[[:alnum:]]+$/, glob ('*'))) {
    my ($grade) = "$group/grade.txt";
    my (@students);
    open (GRADE, '<', $grade) or (print "$grade: open: $!\n"), next;
    while (<GRADE>) {
	last if /^\s*$/;
	my ($student) = /\(([[:alnum:]]+)\@stanford.edu\)/ or next;
	push (@students, $student);
    }
    close (GRADE);

    print "warning: no students in group $group\n"
      if @students == 0;
    print "warning: ", scalar (@students), " students in group $group\n"
      if @students > 3;

    @students = sort @students;
    for (my $i = 0; $i <= $#students; ) {
	push (@{$stu2grp{$students[$i]}}, $group);

	my $j;
	for ($j = $i + 1; $j <= $#students; $j++) {
	    last if $students[$i] ne $students[$j];
	}

	my ($reps) = $j - $i;
	print "warning: $students[$i] appears $reps times in group $group\n"
	    if $reps > 1;

	$i = $j;
    }

    print "warning: no student named $group in group $group\n"
      if !grep ($_ eq $group, @students);

    $group_cnt++;
}

for my $student (keys %stu2grp) {
    my (@groups) = @{$stu2grp{$student}};
    next if @groups == 1;
    print "warning: $student appears in groups ", join (', ', @groups), "\n";
}
print "Scanned ", scalar (keys (%stu2grp)),
  " unique students in $group_cnt groups.\n";
